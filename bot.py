import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
import os

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

post_drafts = {}

def generate_post():
    return '''üß† 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤:

1. [Trends.co](https://trends.co) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ç—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ –∏–¥–µ–∏.  
2. [Glasp](https://glasp.co) ‚Äî –ø–æ–¥–±–æ—Ä–∫–∏ —Å—Ç–∞—Ç–µ–π –∏ –≤–∏–¥–µ–æ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º.  
3. [There‚Äôs an AI for That](https://theresanaiforthat.com) ‚Äî –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤.  
4. [Hacker News Trends](https://hntrends.com) ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã HN.  
5. [IdeaBuddy](https://ideabuddy.com) ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏–¥–µ—é –≤ –±–∏–∑–Ω–µ—Å.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ [@kibronik](https://t.me/kibronik) ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.'''

preview_image = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/512px-ChatGPT_logo.svg.png"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ Kibronik.")

@dp.callback_query_handler(lambda c: c.data == "publish")
async def publish_post(callback_query: types.CallbackQuery):
    print("üîî –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")  # –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    user_id = callback_query.from_user.id
    post = post_drafts.get(user_id)

    if not post:
        print("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id:", user_id)
        await callback_query.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=post, parse_mode=ParseMode.MARKDOWN)
        await callback_query.message.edit_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        print("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª:", e)

@dp.callback_query_handler(lambda c: c.data == "regenerate")
async def regenerate_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    new_post = generate_post()
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
        InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data="regenerate")
    )
    await bot.send_message(user_id, new_post, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
    post_drafts[user_id] = new_post
    await callback_query.answer("üîÅ –ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")

async def on_startup(dispatcher):
    print("üì® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞...")
    post = generate_post()
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
        InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data="regenerate")
    )
    await bot.send_photo(chat_id=OWNER_ID, photo=preview_image, caption=post, parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
    post_drafts[OWNER_ID] = post

async def on_shutdown(dispatcher):
    logging.warning("Shutting down...")
    await bot.session.close()

__all__ = ["dp", "on_startup", "bot", "on_shutdown"]
